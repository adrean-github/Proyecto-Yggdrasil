"""
Comando para poblar MongoDB con datos ficticios pero consistentes
basados en la base de datos SQL existente
"""
from django.core.management.base import BaseCommand
from django.db.models import Q
from datetime import datetime, timedelta, time
import random
from yggdrasilApp.models import Box, Agendabox, Medico, Tipobox, BoxTipoBox
from yggdrasilApp.mongo_models import (
    InventarioBox, AgendaExtendida, DashboardCache, 
    EstadisticasBox, AlertasInteligentes, MetricasBasicas
)
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Pobla MongoDB con datos ficticios consistentes basados en SQL'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--boxes',
            type=int,
            default=0,
            help='N√∫mero de boxes para los que generar inventario (0 = todos)'
        )
        parser.add_argument(
            '--agendas',
            type=int,
            default=50,
            help='N√∫mero de agendas para las que generar datos extendidos'
        )
        parser.add_argument(
            '--limpiar',
            action='store_true',
            help='Limpiar datos existentes en MongoDB antes de poblar'
        )
        parser.add_argument(
            '--solo-inventario',
            action='store_true',
            help='Solo generar inventarios de boxes'
        )
        parser.add_argument(
            '--solo-agendas',
            action='store_true',
            help='Solo generar agendas extendidas'
        )
        parser.add_argument(
            '--solo-cache',
            action='store_true',
            help='Solo generar cache del dashboard'
        )
    
    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Iniciando poblaci√≥n de MongoDB...')
        )
        
        if options['limpiar']:
            self.limpiar_datos_mongo()
        
        if options['solo_inventario']:
            self.generar_inventarios(options['boxes'])
        elif options['solo_agendas']:
            self.generar_agendas_extendidas(options['agendas'])
        elif options['solo_cache']:
            self.generar_cache_dashboard()
        else:
            # Generar todo
            self.generar_inventarios(options['boxes'])
            self.generar_agendas_extendidas(options['agendas'])
            self.generar_estadisticas_historicas()
            self.generar_cache_dashboard()
            self.generar_alertas_ficticias()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Poblaci√≥n de MongoDB completada!')
        )
    
    def limpiar_datos_mongo(self):
        """Limpia todos los datos de MongoDB"""
        self.stdout.write('üßπ Limpiando datos existentes en MongoDB...')
        
        try:
            # Limpiar todas las colecciones
            InventarioBox.objects.all().delete()
            AgendaExtendida.objects.all().delete()
            DashboardCache.objects.all().delete()
            EstadisticasBox.objects.all().delete()
            AlertasInteligentes.objects.all().delete()
            MetricasBasicas.objects.all().delete()
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Datos de MongoDB limpiados')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error limpiando MongoDB: {str(e)}')
            )
    
    def generar_inventarios(self, num_boxes=0):
        """Genera inventarios ficticios para boxes"""
        self.stdout.write('üì¶ Generando inventarios de boxes...')
        
        try:
            # Obtener boxes de SQL
            if num_boxes > 0:
                boxes = Box.objects.all()[:num_boxes]
            else:
                boxes = Box.objects.all()
            
            implementos_base = [
                'Monitor de Signos Vitales',
                'Desfibrilador',
                'Ventilador Mec√°nico',
                'Bomba de Infusi√≥n',
                'Ox√≠metro de Pulso',
                'Electrocardiografo',
                'Camilla El√©ctrica',
                'L√°mpara Quir√∫rgica',
                'Aspirador de Secreciones',
                'Monitor de Presi√≥n Arterial',
                'Nebulizador',
                'Term√≥metro Digital',
                'Gluc√≥metro',
                'Fonendoscopio',
                'Otoscopio'
            ]
            
            marcas = ['Philips', 'GE Healthcare', 'Siemens', 'Medtronic', 'Dr√§ger', 'Mindray']
            
            inventarios_creados = 0
            
            for box in boxes:
                # Verificar si ya existe inventario
                inventario_existente = InventarioBox.objects(box_id=box.idbox).first()
                if inventario_existente:
                    self.stdout.write(f'‚ö†Ô∏è  Box {box.idbox} ya tiene inventario, saltando...')
                    continue
                
                inventario = InventarioBox(box_id=box.idbox, updated_by='sistema_poblado')
                
                # Generar entre 3 y 8 implementos por box
                num_implementos = random.randint(3, 8)
                implementos_box = random.sample(implementos_base, num_implementos)
                
                for implemento_nombre in implementos_box:
                    # 85% probabilidad de que est√© operacional
                    operacional = random.random() < 0.85
                    
                    # Fechas de mantenimiento
                    fecha_ultimo = datetime.now() - timedelta(days=random.randint(30, 180))
                    fecha_proximo = fecha_ultimo + timedelta(days=random.randint(90, 365))
                    
                    inventario.agregar_implemento(
                        nombre=implemento_nombre,
                        descripcion=f"Equipo m√©dico - {implemento_nombre}",
                        marca=random.choice(marcas),
                        modelo=f"Modelo-{random.randint(100, 999)}",
                        numero_serie=f"SN{random.randint(10000, 99999)}",
                        operacional=operacional,
                        observaciones="Funcionando correctamente" if operacional else "Requiere mantenimiento"
                    )
                    
                    # Actualizar fechas de mantenimiento
                    inventario.implementos[-1].fecha_ultimo_mantenimiento = fecha_ultimo
                    inventario.implementos[-1].fecha_proximo_mantenimiento = fecha_proximo
                
                inventario.save()
                inventarios_creados += 1
                
                self.stdout.write(f'üì¶ Box {box.idbox}: {num_implementos} implementos')
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {inventarios_creados} inventarios de boxes creados')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error generando inventarios: {str(e)}')
            )
    
    def generar_agendas_extendidas(self, num_agendas=50):
        """Genera agendas extendidas ficticias basadas en datos reales"""
        self.stdout.write('üìÖ Generando agendas extendidas para TODAS las agendas...')
        
        try:
            # Obtener TODAS las agendas disponibles (no solo m√©dicas)
            todas_agendas = Agendabox.objects.all().order_by('-fechaagenda')
            
            # Debug: mostrar cu√°ntas agendas encontramos
            self.stdout.write(f'üîç Encontradas {todas_agendas.count()} agendas en total')
            
            medicos = list(Medico.objects.all())
            self.stdout.write(f'üë®‚Äç‚öïÔ∏è Encontrados {len(medicos)} m√©dicos en la base de datos')
            
            # Ya no calculamos probabilidad - procesamos TODAS las agendas
            self.stdout.write(f'üéØ Objetivo: Poblar TODAS las {todas_agendas.count()} agendas con datos extendidos')
            
            tipos_procedimiento_por_especialidad = {
                'CIRUGIA': [
                    'Cirug√≠a General', 'Cirug√≠a Laparosc√≥pica', 'Cirug√≠a de Emergencia',
                    'Cirug√≠a Cardiovascular', 'Cirug√≠a Traumatol√≥gica', 'Cirug√≠a Pl√°stica',
                    'Cirug√≠a Neurol√≥gica', 'Cirug√≠a Urol√≥gica'
                ],
                'CONSULTA': [
                    'Consulta General', 'Consulta Especializada', 'Control Post-operatorio',
                    'Evaluaci√≥n Pre-quir√∫rgica', 'Consulta de Urgencia', 'Segunda Opini√≥n'
                ],
                'DIAGNOSTICO': [
                    'Ecograf√≠a', 'Endoscopia', 'Colonoscopia', 'Biopsia',
                    'Electrocardiograma', 'Holter', 'Pruebas de Funci√≥n Pulmonar'
                ],
                'IMAGENOLOGIA': [
                    'Radiograf√≠a', 'Tomograf√≠a', 'Resonancia Magn√©tica',
                    'Angiograf√≠a', 'Mamograf√≠a', 'Densitometr√≠a'
                ],
                'TERAPIA': [
                    'Quimioterapia', 'Radioterapia', 'Hemodi√°lisis',
                    'Fisioterapia', 'Terapia Respiratoria', 'Rehabilitaci√≥n'
                ]
            }
            
            roles_medicos_especializados = [
                'Cirujano Principal', 'Cirujano Asistente', 'Anestesista',
                'Enfermero Instrumentista', 'Residente', 'Interno',
                'Supervisor', 'Especialista Consultor', 'M√©dico Tratante',
                'Jefe de Servicio', 'M√©dico de Apoyo'
            ]
            
            equipamiento_por_tipo = {
                'CIRUGIA': [
                    'Mesa Quir√∫rgica', 'L√°mpara Quir√∫rgica', 'Electrocauterio',
                    'Aspirador Quir√∫rgico', 'Monitor de Anestesia', 'Ventilador',
                    'Desfibrilador', 'Instrumental Especializado'
                ],
                'CONSULTA': [
                    'Camilla de Examen', 'Tensi√≥metro', 'Fonendoscopio',
                    'Otoscopio', 'Oftalmoscopio', 'B√°scula', 'Tall√≠metro'
                ],
                'DIAGNOSTICO': [
                    'Ec√≥grafo', 'Endoscopio', 'Monitor de Signos Vitales',
                    'Electrocardi√≥grafo', 'Equipo de Biopsia'
                ],
                'IMAGENOLOGIA': [
                    'Equipo de Rayos X', 'Tom√≥grafo', 'Resonador',
                    'Mam√≥grafo', 'Contraste', 'Protecci√≥n Radiol√≥gica'
                ],
                'TERAPIA': [
                    'Bomba de Infusi√≥n', 'Monitor Cardiaco', 'Equipo de Di√°lisis',
                    'Ventilador', 'Ox√≠geno', 'Medicamentos Especializados'
                ]
            }
            
            agendas_creadas = 0
            agendas_procesadas = 0
            agendas_saltadas_existentes = 0
            
            for agenda in todas_agendas:
                agendas_procesadas += 1
                
                # NO usar probabilidad - procesar TODAS las agendas
                
                # Verificar si ya existe agenda extendida
                agenda_ext_existente = AgendaExtendida.objects(agenda_id=agenda.id).first()
                if agenda_ext_existente:
                    agendas_saltadas_existentes += 1
                    if agendas_saltadas_existentes % 1000 == 0:
                        self.stdout.write(f'‚ö†Ô∏è {agendas_saltadas_existentes} agendas ya tienen extensi√≥n...')
                    continue
                
                # Debug: mostrar progreso cada 2000 agendas
                if agendas_creadas % 2000 == 0 and agendas_creadas > 0:
                    porcentaje = (agendas_procesadas / todas_agendas.count()) * 100
                    self.stdout.write(f'üîÑ Progreso: {agendas_creadas} creadas, {agendas_procesadas} procesadas ({porcentaje:.1f}%)')
                
                # Determinar tipo de procedimiento basado en el box
                tipo_box = 'CONSULTA'  # Default
                try:
                    if agenda.idbox:
                        # Intentar determinar el tipo de box
                        box_tipos = BoxTipoBox.objects.filter(idbox=agenda.idbox)
                        if box_tipos.exists():
                            # Corregir el nombre del campo - podr√≠a ser nombretipobox, nombre, o descripcion
                            tipo_box_obj = box_tipos.first().idtipobox
                            primer_tipo = ""
                            
                            # Intentar diferentes nombres de campo
                            if hasattr(tipo_box_obj, 'nombretipobox'):
                                primer_tipo = tipo_box_obj.nombretipobox.upper()
                            elif hasattr(tipo_box_obj, 'nombre'):
                                primer_tipo = tipo_box_obj.nombre.upper()
                            elif hasattr(tipo_box_obj, 'descripcion'):
                                primer_tipo = tipo_box_obj.descripcion.upper()
                            elif hasattr(tipo_box_obj, 'tipo'):
                                primer_tipo = tipo_box_obj.tipo.upper()
                            else:
                                # Si no encontramos el campo, usar string representation
                                primer_tipo = str(tipo_box_obj).upper()
                            
                            if any(keyword in primer_tipo for keyword in ['CIRUG', 'QUIROF']):
                                tipo_box = 'CIRUGIA'
                            elif any(keyword in primer_tipo for keyword in ['IMAGEN', 'RADIO', 'TOMO']):
                                tipo_box = 'IMAGENOLOGIA'
                            elif any(keyword in primer_tipo for keyword in ['DIAG', 'ENDO', 'ECO']):
                                tipo_box = 'DIAGNOSTICO'
                            elif any(keyword in primer_tipo for keyword in ['TERAP', 'QUIMIO', 'DIALISIS']):
                                tipo_box = 'TERAPIA'
                except Exception as e:
                    # Silenciar el error ya que no afecta la funcionalidad
                    pass  # Mantener default
                
                agenda_ext = AgendaExtendida(
                    agenda_id=agenda.id,
                    tipo_procedimiento=random.choice(tipos_procedimiento_por_especialidad[tipo_box]),
                    updated_by='sistema_poblado'
                )
                
                # Agregar m√©dico principal (el que ya est√° en la agenda)
                if agenda.idmedico:
                    # Determinar rol principal basado en el tipo de procedimiento
                    rol_principal = 'M√©dico Tratante'
                    if tipo_box == 'CIRUGIA':
                        rol_principal = 'Cirujano Principal'
                    elif tipo_box == 'CONSULTA':
                        rol_principal = 'M√©dico Especialista'
                    
                    # Manejo seguro de horarios
                    hora_inicio = None
                    hora_fin = None
                    try:
                        if agenda.horainicioagenda and agenda.fechaagenda:
                            hora_inicio = datetime.combine(agenda.fechaagenda, agenda.horainicioagenda)
                        if agenda.horafinagenda and agenda.fechaagenda:
                            hora_fin = datetime.combine(agenda.fechaagenda, agenda.horafinagenda)
                    except Exception as e:
                        self.stdout.write(f'‚ö†Ô∏è Error procesando horarios para agenda {agenda.id}: {str(e)}')
                    
                    agenda_ext.agregar_medico(
                        medico_id=agenda.idmedico.idmedico,
                        es_principal=True,
                        rol=rol_principal,
                        hora_inicio=hora_inicio,
                        hora_fin=hora_fin,
                        observaciones="M√©dico responsable principal del procedimiento"
                    )
                
                # MODIFICAR: Agregar m√©dicos adicionales con 40% de probabilidad
                if random.random() < 0.4 and len(medicos) > 1:  # 40% de probabilidad para TODAS las agendas
                    # Determinar n√∫mero de m√©dicos adicionales
                    if tipo_box == 'CIRUGIA':
                        num_medicos_adicionales = random.randint(1, 3)  # Cirug√≠as pueden tener m√°s m√©dicos
                    elif tipo_box == 'DIAGNOSTICO' or tipo_box == 'TERAPIA':
                        num_medicos_adicionales = random.randint(1, 2)  # Procedimientos especializados
                    else:  # CONSULTA, IMAGENOLOGIA
                        num_medicos_adicionales = random.randint(1, 2)  # Consultas y estudios
                    
                    medicos_disponibles = [m for m in medicos if not agenda.idmedico or m.idmedico != agenda.idmedico.idmedico]
                    
                    for i in range(min(num_medicos_adicionales, len(medicos_disponibles))):
                        medico_adicional = random.choice(medicos_disponibles)
                        medicos_disponibles.remove(medico_adicional)
                        
                        # Roles espec√≠ficos por tipo
                        roles_disponibles = roles_medicos_especializados[1:]  # Excluir principal
                        if tipo_box == 'CIRUGIA':
                            roles_disponibles = ['Cirujano Asistente', 'Anestesista', 'Enfermero Instrumentista', 'Residente']
                        elif tipo_box == 'CONSULTA':
                            roles_disponibles = ['Residente', 'Interno', 'M√©dico de Apoyo', 'Especialista Consultor']
                        elif tipo_box == 'DIAGNOSTICO':
                            roles_disponibles = ['Especialista Consultor', 'Residente', 'M√©dico de Apoyo']
                        elif tipo_box == 'IMAGENOLOGIA':
                            roles_disponibles = ['Radi√≥logo', 'T√©cnico Especializado', 'Residente']
                        elif tipo_box == 'TERAPIA':
                            roles_disponibles = ['Especialista en Terapia', 'Enfermero Especializado', 'Residente']
                        
                        # Calcular horarios para m√©dicos adicionales
                        hora_inicio_adicional = None
                        hora_fin_adicional = None
                        if agenda.horainicioagenda and agenda.horafinagenda:
                            base_inicio = datetime.combine(agenda.fechaagenda, agenda.horainicioagenda)
                            base_fin = datetime.combine(agenda.fechaagenda, agenda.horafinagenda)
                            
                            # Algunos m√©dicos llegan antes, otros durante el procedimiento
                            if random.random() < 0.3:  # 30% llega antes
                                hora_inicio_adicional = base_inicio - timedelta(minutes=random.randint(15, 60))
                                hora_fin_adicional = base_fin
                            else:  # Llega durante o justo a tiempo
                                hora_inicio_adicional = base_inicio + timedelta(minutes=random.randint(0, 30))
                                hora_fin_adicional = base_fin - timedelta(minutes=random.randint(0, 30))
                        
                        observaciones_especificas = [
                            "M√©dico de apoyo especializado",
                            "Supervisi√≥n de procedimiento",
                            "Entrenamiento y seguimiento",
                            "Consulta especializada requerida",
                            "Apoyo en t√©cnica espec√≠fica",
                            "Supervisi√≥n de residentes",
                            "Colaboraci√≥n interdisciplinaria",
                            "Segunda opini√≥n m√©dica"
                        ]
                        
                        agenda_ext.agregar_medico(
                            medico_id=medico_adicional.idmedico,
                            es_principal=False,
                            rol=random.choice(roles_disponibles),
                            hora_inicio=hora_inicio_adicional,
                            hora_fin=hora_fin_adicional,
                            observaciones=random.choice(observaciones_especificas)
                        )
                
                # Equipamiento requerido espec√≠fico por tipo
                if tipo_box in equipamiento_por_tipo:
                    num_equipos = random.randint(2, min(6, len(equipamiento_por_tipo[tipo_box])))
                    agenda_ext.equipamiento_requerido = random.sample(
                        equipamiento_por_tipo[tipo_box], 
                        num_equipos
                    )
                
                # Preparaci√≥n especial m√°s espec√≠fica
                preparaciones_especiales = {
                    'CIRUGIA': [
                        "Ayuno de 8 horas previo",
                        "Preparaci√≥n intestinal completa",
                        "Suspensi√≥n de anticoagulantes",
                        "Profilaxis antibi√≥tica pre-quir√∫rgica",
                        "Marcaje de sitio quir√∫rgico"
                    ],
                    'DIAGNOSTICO': [
                        "Ayuno de 4 horas",
                        "Suspensi√≥n de medicamentos espec√≠ficos",
                        "Preparaci√≥n intestinal parcial",
                        "Sedaci√≥n consciente programada"
                    ],
                    'IMAGENOLOGIA': [
                        "Contraste oral programado",
                        "Ayuno para contraste endovenoso",
                        "Retirar objetos met√°licos",
                        "Verificar alergias a contraste"
                    ],
                    'TERAPIA': [
                        "Acceso vascular confirmado",
                        "Laboratorios pre-tratamiento",
                        "Medicaci√≥n pre-terapia",
                        "Monitoreo especializado"
                    ]
                }
                
                if random.random() < 0.6:  # 60% tiene preparaci√≥n especial
                    agenda_ext.preparacion_especial = random.choice(
                        preparaciones_especiales.get(tipo_box, ["Preparaci√≥n est√°ndar"])
                    )
                
                # Notas adicionales m√°s detalladas
                notas_base = f"Procedimiento: {agenda_ext.tipo_procedimiento}. "
                
                notas_adicionales = {
                    'CIRUGIA': [
                        "Consentimiento informado firmado. Riesgo quir√∫rgico evaluado.",
                        "Interconsulta anest√©sica completada. Paciente estable.",
                        "Estudios pre-operatorios completos y vigentes.",
                        "Reserva de sangre confirmada. Familiares notificados."
                    ],
                    'CONSULTA': [
                        "Historia cl√≠nica completa disponible.",
                        "Estudios complementarios solicitados.",
                        "Seguimiento de tratamiento previo.",
                        "Evaluaci√≥n para nuevo tratamiento."
                    ],
                    'DIAGNOSTICO': [
                        "Indicaci√≥n m√©dica clara y espec√≠fica.",
                        "Consentimiento para procedimiento firmado.",
                        "Alergias verificadas y documentadas.",
                        "Preparaci√≥n del paciente confirmada."
                    ]
                }
                
                agenda_ext.notas_adicionales = notas_base + random.choice(
                    notas_adicionales.get(tipo_box, ["Procedimiento est√°ndar programado."])
                )
                
                # Registrar cambio inicial con m√°s detalle
                agenda_ext.registrar_cambio(
                    usuario='sistema_poblado',
                    accion='creacion_automatica',
                    detalle=f'Agenda extendida generada para {tipo_box}: {agenda_ext.tipo_procedimiento}'
                )
                
                # Intentar guardar la agenda extendida
                try:
                    agenda_ext.save()
                    agendas_creadas += 1
                    
                    # Mostrar progreso cada 5000 agendas creadas
                    if agendas_creadas % 5000 == 0:
                        porcentaje = (agendas_procesadas / todas_agendas.count()) * 100
                        self.stdout.write(f'‚úÖ {agendas_creadas} agendas extendidas creadas ({porcentaje:.1f}% completado)')
                
                except Exception as e:
                    self.stdout.write(f'‚ùå Error guardando agenda extendida {agenda.id}: {str(e)}')
                    continue
                
                # Mostrar progreso cada 10000 agendas procesadas
                if agendas_procesadas % 10000 == 0:
                    porcentaje_completado = (agendas_procesadas / todas_agendas.count()) * 100
                    tiempo_estimado = "Calculando..." if agendas_procesadas < 1000 else f"~{int((todas_agendas.count() - agendas_procesadas) / 1000)} min restantes"
                    self.stdout.write(f'üìä Procesadas {agendas_procesadas}/{todas_agendas.count()} ({porcentaje_completado:.1f}%) - Creadas: {agendas_creadas} - {tiempo_estimado}')
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {agendas_creadas} agendas extendidas creadas de {agendas_procesadas} agendas procesadas')
            )
            self.stdout.write(f'üìä Agendas saltadas (ya exist√≠an): {agendas_saltadas_existentes}')
            self.stdout.write(f'üìä Total de agendas en el sistema: {todas_agendas.count()}')
            self.stdout.write(f'üìä Porcentaje de cobertura: {((agendas_creadas + agendas_saltadas_existentes) / todas_agendas.count()) * 100:.1f}%')
            
            # Estad√≠sticas de m√©dicos m√∫ltiples
            agendas_con_multiples_medicos = 0
            total_medicos_adicionales = 0
            for agenda_ext in AgendaExtendida.objects.all():
                if len(agenda_ext.medicos) > 1:
                    agendas_con_multiples_medicos += 1
                    total_medicos_adicionales += len(agenda_ext.medicos) - 1
            
            if agendas_creadas > 0:
                porcentaje_multiples = (agendas_con_multiples_medicos / (agendas_creadas + agendas_saltadas_existentes)) * 100
                self.stdout.write(f'üìä Agendas con m√∫ltiples m√©dicos: {agendas_con_multiples_medicos} ({porcentaje_multiples:.1f}%)')
                self.stdout.write(f'üìä Total de m√©dicos adicionales agregados: {total_medicos_adicionales}')
            
            tipos_generados = {}
            for agenda_ext in AgendaExtendida.objects.all():
                tipo = agenda_ext.tipo_procedimiento
                tipos_generados[tipo] = tipos_generados.get(tipo, 0) + 1
            
            self.stdout.write('üìä Tipos de procedimientos generados:')
            for tipo, cantidad in sorted(tipos_generados.items(), key=lambda x: x[1], reverse=True)[:5]:
                self.stdout.write(f'   ‚Ä¢ {tipo}: {cantidad}')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error generando agendas extendidas: {str(e)}')
            )
            logger.error(f'Error en generar_agendas_extendidas: {str(e)}', exc_info=True)
    
    def generar_estadisticas_historicas(self):
        """Genera estad√≠sticas hist√≥ricas por box"""
        self.stdout.write('üìä Generando estad√≠sticas hist√≥ricas...')
        
        try:
            from yggdrasilApp.modulos.dashboard_optimizer import DashboardOptimizer
            
            # Generar estad√≠sticas para los √∫ltimos 3 meses
            fecha_actual = datetime.now()
            
            for i in range(3):  # √öltimos 3 meses
                mes_fecha = fecha_actual - timedelta(days=30 * i)
                DashboardOptimizer.generar_estadisticas_mensuales_boxes()
                self.stdout.write(f'üìä Estad√≠sticas generadas para mes {mes_fecha.strftime("%B %Y")}')
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Estad√≠sticas hist√≥ricas generadas')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error generando estad√≠sticas: {str(e)}')
            )
    
    def generar_cache_dashboard(self):
        """Genera cache inicial del dashboard"""
        self.stdout.write('üöÄ Generando cache del dashboard...')
        
        try:
            from yggdrasilApp.modulos.dashboard_optimizer import DashboardOptimizer
            
            periodos = ['day', 'week', 'month', 'year']
            
            for periodo in periodos:
                cache = DashboardOptimizer.precalcular_dashboard(periodo)
                if cache:
                    self.stdout.write(f'üöÄ Cache generado para per√≠odo: {periodo}')
                else:
                    self.stdout.write(f'‚ö†Ô∏è  Error generando cache para: {periodo}')
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Cache del dashboard generado')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error generando cache: {str(e)}')
            )
    
    def generar_alertas_ficticias(self):
        """Genera algunas alertas ficticias para demostraci√≥n"""
        self.stdout.write('üö® Generando alertas ficticias...')
        
        try:
            boxes = Box.objects.all()[:5]  # Primeros 5 boxes
            
            alertas_creadas = 0
            
            for box in boxes:
                # 30% probabilidad de alerta por box
                if random.random() < 0.3:
                    tipo_alerta = random.choice([
                        'box_subutilizado',
                        'implementos_fallan',
                        'eficiencia_baja'
                    ])
                    
                    if tipo_alerta == 'box_subutilizado':
                        alerta = AlertasInteligentes(
                            tipo_alerta=tipo_alerta,
                            box_id=box.idbox,
                            titulo=f"Box {box.idbox} subutilizado",
                            descripcion=f"El box {box.idbox} tiene muy pocas reservas esta semana",
                            severidad='media',
                            valor_actual=random.randint(1, 4),
                            umbral_definido=5.0,
                            datos_contexto={
                                'pasillo': box.pasillobox,
                                'estado': box.estadobox
                            }
                        )
                    elif tipo_alerta == 'implementos_fallan':
                        alerta = AlertasInteligentes(
                            tipo_alerta=tipo_alerta,
                            box_id=box.idbox,
                            titulo=f"Implementos no operacionales en Box {box.idbox}",
                            descripcion=f"Hay implementos que requieren mantenimiento",
                            severidad='alta',
                            valor_actual=random.randint(1, 3),
                            umbral_definido=1.0,
                            datos_contexto={
                                'implementos_afectados': random.randint(1, 3)
                            }
                        )
                    else:  # eficiencia_baja
                        alerta = AlertasInteligentes(
                            tipo_alerta=tipo_alerta,
                            box_id=box.idbox,
                            titulo=f"Eficiencia baja en Box {box.idbox}",
                            descripcion=f"La eficiencia del box est√° por debajo del promedio",
                            severidad='media',
                            valor_actual=random.uniform(40, 60),
                            umbral_definido=70.0,
                            datos_contexto={
                                'eficiencia_promedio_general': 75.5
                            }
                        )
                    
                    alerta.save()
                    alertas_creadas += 1
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {alertas_creadas} alertas ficticias creadas')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error generando alertas: {str(e)}')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error generando alertas: {str(e)}')
            )
